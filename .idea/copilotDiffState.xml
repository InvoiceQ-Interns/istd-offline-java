<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/python_implementation/fotara_main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/python_implementation/fotara_main.py" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/python_implementation/requirements.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/python_implementation/requirements.txt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/gov/jordan/istd/utils/CmsRequestHelper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/gov/jordan/istd/utils/CmsRequestHelper.java" />
              <option name="originalContent" value="package gov.jordan.istd.utils;&#10;&#10;import gov.jordan.istd.dto.CsrConfigDto;&#10;import gov.jordan.istd.dto.CsrResponseDto;&#10;import org.bouncycastle.asn1.*;&#10;import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;&#10;import org.bouncycastle.asn1.x500.X500Name;&#10;import org.bouncycastle.asn1.x509.*;&#10;import org.bouncycastle.operator.ContentSigner;&#10;import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;&#10;import org.bouncycastle.pkcs.PKCS10CertificationRequest;&#10;import org.bouncycastle.pkcs.PKCS10CertificationRequestBuilder;&#10;import org.bouncycastle.pkcs.jcajce.JcaPKCS10CertificationRequestBuilder;&#10;&#10;import javax.crypto.Cipher;&#10;import javax.crypto.EncryptedPrivateKeyInfo;&#10;import javax.crypto.SecretKey;&#10;import javax.crypto.SecretKeyFactory;&#10;import javax.crypto.spec.PBEKeySpec;&#10;import javax.crypto.spec.PBEParameterSpec;&#10;import java.security.*;&#10;import java.security.spec.PKCS8EncodedKeySpec;&#10;&#10;/**&#10; * Java equivalent of C# CmsRequestHelper class&#10; * Provides CSR generation with RSA keys, Subject Key Identifier, and Certificate Template extensions&#10; */&#10;public class CmsRequestHelper {&#10;&#10;    /**&#10;     * Create CSR with RSA keys and extensions - Java equivalent of C# CreateCsr method&#10;     *&#10;     * @param config Configuration object containing all CSR parameters&#10;     * @return CsrResponseDto containing DER-encoded CSR and encrypted private key&#10;     * @throws Exception if CSR generation fails&#10;     */&#10;    public static CsrResponseDto createCsr(CsrConfigDto config) throws Exception {&#10;        if (config.getPassword() == null || config.getPassword().trim().isEmpty()) {&#10;            throw new IllegalArgumentException(&quot;Password must not be null or empty.&quot;);&#10;        }&#10;&#10;        // Generate RSA key pair (equivalent to C# RSA.Create(keySize))&#10;        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(&quot;RSA&quot;);&#10;        keyGen.initialize(config.getKeySize());&#10;        KeyPair keyPair = keyGen.generateKeyPair();&#10;&#10;        // Create subject from DN string (equivalent to C# CertificateRequest)&#10;        X500Name subject = new X500Name(config.getSubjectDn());&#10;&#10;        // Build CSR (equivalent to C# CertificateRequest)&#10;        PKCS10CertificationRequestBuilder builder =&#10;            new JcaPKCS10CertificationRequestBuilder(subject, keyPair.getPublic());&#10;&#10;        // Add extensions&#10;        ExtensionsGenerator extGen = new ExtensionsGenerator();&#10;&#10;        // Subject Key Identifier (SKI) - equivalent to C# SKI creation&#10;        addSubjectKeyIdentifier(extGen, keyPair.getPublic());&#10;&#10;        // Certificate Template Extension (if provided) - Microsoft OID&#10;        if (config.getTemplateOid() != null &amp;&amp; !config.getTemplateOid().isEmpty()) {&#10;            addCertificateTemplateExtension(extGen, config.getTemplateOid(),&#10;                                          config.getMajorVersion(), config.getMinorVersion());&#10;        }&#10;&#10;        // Add extensions to CSR&#10;        Extensions extensions = extGen.generate();&#10;        builder.addAttribute(PKCSObjectIdentifiers.pkcs_9_at_extensionRequest, extensions);&#10;&#10;        // Sign the CSR (equivalent to C# CreateSigningRequest with SHA256withRSA and PKCS1 padding)&#10;        ContentSigner signer = new JcaContentSignerBuilder(&quot;SHA256withRSA&quot;).build(keyPair.getPrivate());&#10;        PKCS10CertificationRequest csr = builder.build(signer);&#10;&#10;        // Get CSR DER bytes (equivalent to C# CreateSigningRequest())&#10;        byte[] pkcs10Der = csr.getEncoded();&#10;&#10;        // Encrypt private key (equivalent to C# ExportEncryptedPkcs8PrivateKey)&#10;        byte[] privateKeyBytes = exportEncryptedPkcs8PrivateKey(keyPair.getPrivate(), config.getPassword());&#10;&#10;        return new CsrResponseDto(pkcs10Der, privateKeyBytes);&#10;    }&#10;&#10;    /**&#10;     * Add Subject Key Identifier extension (equivalent to C# SKI creation)&#10;     * Matches the exact C# implementation: SHA1 hash of public key + AsnWriter.WriteOctetString&#10;     */&#10;    private static void addSubjectKeyIdentifier(ExtensionsGenerator extGen, PublicKey publicKey) throws Exception {&#10;        // Get public key bytes (equivalent to C# ExportSubjectPublicKeyInfo)&#10;        byte[] publicKeyBytes = publicKey.getEncoded();&#10;&#10;        // Calculate SHA-1 hash (equivalent to C# SHA1.HashData)&#10;        MessageDigest sha1 = MessageDigest.getInstance(&quot;SHA-1&quot;);&#10;        byte[] skiBytes = sha1.digest(publicKeyBytes);&#10;&#10;        // Create SKI extension using DEROctetString (equivalent to C# AsnWriter.WriteOctetString)&#10;        // OID &quot;2.5.29.14&quot; = Subject Key Identifier&#10;        extGen.addExtension(new ASN1ObjectIdentifier(&quot;2.5.29.14&quot;), false, new DEROctetString(skiBytes));&#10;    }&#10;&#10;    /**&#10;     * Add Certificate Template extension (equivalent to C# BuildCertificateTemplateExtension)&#10;     */&#10;    private static void addCertificateTemplateExtension(ExtensionsGenerator extGen, String oid,&#10;                                                       int majorVersion, int minorVersion) throws Exception {&#10;        // Build template extension (equivalent to C# BuildCertificateTemplateExtension)&#10;        byte[] templateExtension = buildCertificateTemplateExtension(oid, majorVersion, minorVersion);&#10;&#10;        // Microsoft Certificate Template OID: 1.3.6.1.4.1.311.21.7&#10;        extGen.addExtension(new ASN1ObjectIdentifier(&quot;1.3.6.1.4.1.311.21.7&quot;),&#10;                           false, new DEROctetString(templateExtension));&#10;    }&#10;&#10;    /**&#10;     * Build Certificate Template extension (equivalent to C# BuildCertificateTemplateExtension method)&#10;     * Exactly matches C#: AsnWriter.PushSequence() -&gt; WriteObjectIdentifier -&gt; WriteInteger -&gt; WriteInteger -&gt; PopSequence&#10;     */&#10;    private static byte[] buildCertificateTemplateExtension(String oid, int majorVersion, int minorVersion) throws Exception {&#10;        ASN1EncodableVector templateVector = new ASN1EncodableVector();&#10;&#10;        // Add template OID (equivalent to C# writer.WriteObjectIdentifier)&#10;        templateVector.add(new ASN1ObjectIdentifier(oid));&#10;&#10;        // Add major version (equivalent to C# writer.WriteInteger)&#10;        templateVector.add(new ASN1Integer(majorVersion));&#10;&#10;        // Add minor version (equivalent to C# writer.WriteInteger)&#10;        templateVector.add(new ASN1Integer(minorVersion));&#10;&#10;        // Create sequence (equivalent to C# PushSequence/PopSequence)&#10;        DERSequence templateSequence = new DERSequence(templateVector);&#10;&#10;        return templateSequence.getEncoded();&#10;    }&#10;&#10;    /**&#10;     * Encrypt private key using PKCS#8 with AES256-CBC (equivalent to C# ExportEncryptedPkcs8PrivateKey)&#10;     * Matches C#: PbeParameters(PbeEncryptionAlgorithm.Aes256Cbc, HashAlgorithmName.SHA256, 100000)&#10;     */&#10;    private static byte[] exportEncryptedPkcs8PrivateKey(PrivateKey privateKey, String password) throws Exception {&#10;        try {&#10;            // Use the Java equivalent of C# PbeParameters(PbeEncryptionAlgorithm.Aes256Cbc, HashAlgorithmName.SHA256, 100000)&#10;            // Java equivalent: PBES2 with HMAC-SHA256 and AES-256-CBC&#10;            SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(&quot;PBKDF2WithHmacSHA256&quot;);&#10;&#10;            // Generate salt (16 bytes for AES)&#10;            byte[] salt = new byte[16];&#10;            SecureRandom.getInstanceStrong().nextBytes(salt);&#10;&#10;            // Create PBE key spec with 100,000 iterations (matching C#)&#10;            PBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray(), salt, 100000, 256); // 256-bit key for AES-256&#10;            SecretKey secretKey = secretKeyFactory.generateSecret(pbeKeySpec);&#10;&#10;            // Use AES-256-CBC for encryption (matching C# Aes256Cbc)&#10;            Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;);&#10;&#10;            // Generate IV for CBC mode&#10;            byte[] iv = new byte[16];&#10;            SecureRandom.getInstanceStrong().nextBytes(iv);&#10;            javax.crypto.spec.IvParameterSpec ivSpec = new javax.crypto.spec.IvParameterSpec(iv);&#10;&#10;            // Initialize cipher with the derived key&#10;            javax.crypto.spec.SecretKeySpec aesKey = new javax.crypto.spec.SecretKeySpec(secretKey.getEncoded(), &quot;AES&quot;);&#10;            cipher.init(Cipher.ENCRYPT_MODE, aesKey, ivSpec);&#10;&#10;            // Encrypt the private key&#10;            byte[] privateKeyBytes = privateKey.getEncoded();&#10;            byte[] encryptedBytes = cipher.doFinal(privateKeyBytes);&#10;&#10;            // Create PKCS#8 EncryptedPrivateKeyInfo manually using BouncyCastle&#10;            // This matches the C# ExportEncryptedPkcs8PrivateKey format&#10;            org.bouncycastle.asn1.ASN1EncodableVector algorithmVector = new org.bouncycastle.asn1.ASN1EncodableVector();&#10;&#10;            // PBES2 algorithm identifier&#10;            algorithmVector.add(new org.bouncycastle.asn1.ASN1ObjectIdentifier(&quot;1.2.840.113549.1.5.13&quot;)); // PBES2&#10;&#10;            // PBES2 parameters&#10;            org.bouncycastle.asn1.ASN1EncodableVector pbes2Params = new org.bouncycastle.asn1.ASN1EncodableVector();&#10;&#10;            // Key derivation function (PBKDF2 with HMAC-SHA256)&#10;            org.bouncycastle.asn1.ASN1EncodableVector kdfVector = new org.bouncycastle.asn1.ASN1EncodableVector();&#10;            kdfVector.add(new org.bouncycastle.asn1.ASN1ObjectIdentifier(&quot;1.2.840.113549.1.5.12&quot;)); // PBKDF2&#10;&#10;            org.bouncycastle.asn1.ASN1EncodableVector pbkdf2Params = new org.bouncycastle.asn1.ASN1EncodableVector();&#10;            pbkdf2Params.add(new org.bouncycastle.asn1.DEROctetString(salt));&#10;            pbkdf2Params.add(new org.bouncycastle.asn1.ASN1Integer(100000)); // iteration count&#10;            pbkdf2Params.add(new org.bouncycastle.asn1.ASN1Integer(32)); // key length (256 bits = 32 bytes)&#10;&#10;            // HMAC-SHA256 identifier&#10;            org.bouncycastle.asn1.ASN1EncodableVector hmacVector = new org.bouncycastle.asn1.ASN1EncodableVector();&#10;            hmacVector.add(new org.bouncycastle.asn1.ASN1ObjectIdentifier(&quot;1.2.840.113549.2.9&quot;)); // HMAC-SHA256&#10;            pbkdf2Params.add(new org.bouncycastle.asn1.DERSequence(hmacVector));&#10;&#10;            kdfVector.add(new org.bouncycastle.asn1.DERSequence(pbkdf2Params));&#10;            pbes2Params.add(new org.bouncycastle.asn1.DERSequence(kdfVector));&#10;&#10;            // Encryption scheme (AES-256-CBC)&#10;            org.bouncycastle.asn1.ASN1EncodableVector encSchemeVector = new org.bouncycastle.asn1.ASN1EncodableVector();&#10;            encSchemeVector.add(new org.bouncycastle.asn1.ASN1ObjectIdentifier(&quot;2.16.840.1.101.3.4.1.42&quot;)); // AES-256-CBC&#10;            encSchemeVector.add(new org.bouncycastle.asn1.DEROctetString(iv));&#10;            pbes2Params.add(new org.bouncycastle.asn1.DERSequence(encSchemeVector));&#10;&#10;            algorithmVector.add(new org.bouncycastle.asn1.DERSequence(pbes2Params));&#10;&#10;            // Create the complete EncryptedPrivateKeyInfo structure&#10;            org.bouncycastle.asn1.ASN1EncodableVector encPrivKeyVector = new org.bouncycastle.asn1.ASN1EncodableVector();&#10;            encPrivKeyVector.add(new org.bouncycastle.asn1.DERSequence(algorithmVector));&#10;            encPrivKeyVector.add(new org.bouncycastle.asn1.DEROctetString(encryptedBytes));&#10;&#10;            org.bouncycastle.asn1.DERSequence encPrivKeyInfo = new org.bouncycastle.asn1.DERSequence(encPrivKeyVector);&#10;&#10;            return encPrivKeyInfo.getEncoded();&#10;&#10;        } catch (Exception e) {&#10;            throw new Exception(&quot;Failed to encrypt private key: &quot; + e.getMessage(), e);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package gov.jordan.istd.utils;&#10;&#10;import gov.jordan.istd.dto.CsrConfigDto;&#10;import gov.jordan.istd.dto.CsrResponseDto;&#10;import org.bouncycastle.asn1.*;&#10;import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;&#10;import org.bouncycastle.asn1.x500.X500Name;&#10;import org.bouncycastle.asn1.x509.*;&#10;import org.bouncycastle.operator.ContentSigner;&#10;import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;&#10;import org.bouncycastle.pkcs.PKCS10CertificationRequest;&#10;import org.bouncycastle.pkcs.PKCS10CertificationRequestBuilder;&#10;import org.bouncycastle.pkcs.jcajce.JcaPKCS10CertificationRequestBuilder;&#10;&#10;import javax.crypto.Cipher;&#10;import javax.crypto.EncryptedPrivateKeyInfo;&#10;import javax.crypto.SecretKey;&#10;import javax.crypto.SecretKeyFactory;&#10;import javax.crypto.spec.PBEKeySpec;&#10;import javax.crypto.spec.PBEParameterSpec;&#10;import java.security.*;&#10;import java.security.spec.PKCS8EncodedKeySpec;&#10;&#10;public class CmsRequestHelper {&#10;&#10;    public static CsrResponseDto createCsr(CsrConfigDto config) throws Exception {&#10;        if (config.getPassword() == null || config.getPassword().trim().isEmpty()) {&#10;            throw new IllegalArgumentException(&quot;Password must not be null or empty.&quot;);&#10;        }&#10;&#10;        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(&quot;RSA&quot;);&#10;        keyGen.initialize(config.getKeySize());&#10;        KeyPair keyPair = keyGen.generateKeyPair();&#10;&#10;        X500Name subject = new X500Name(config.getSubjectDn());&#10;&#10;        PKCS10CertificationRequestBuilder builder =&#10;            new JcaPKCS10CertificationRequestBuilder(subject, keyPair.getPublic());&#10;&#10;        ExtensionsGenerator extGen = new ExtensionsGenerator();&#10;&#10;        addSubjectKeyIdentifier(extGen, keyPair.getPublic());&#10;&#10;        if (config.getTemplateOid() != null &amp;&amp; !config.getTemplateOid().isEmpty()) {&#10;            addCertificateTemplateExtension(extGen, config.getTemplateOid(),&#10;                                          config.getMajorVersion(), config.getMinorVersion());&#10;        }&#10;&#10;        Extensions extensions = extGen.generate();&#10;        builder.addAttribute(PKCSObjectIdentifiers.pkcs_9_at_extensionRequest, extensions);&#10;&#10;        ContentSigner signer = new JcaContentSignerBuilder(&quot;SHA256withRSA&quot;).build(keyPair.getPrivate());&#10;        PKCS10CertificationRequest csr = builder.build(signer);&#10;&#10;        byte[] pkcs10Der = csr.getEncoded();&#10;&#10;        byte[] privateKeyBytes = exportEncryptedPkcs8PrivateKey(keyPair.getPrivate(), config.getPassword());&#10;&#10;        return new CsrResponseDto(pkcs10Der, privateKeyBytes);&#10;    }&#10;&#10;    private static void addSubjectKeyIdentifier(ExtensionsGenerator extGen, PublicKey publicKey) throws Exception {&#10;        byte[] publicKeyBytes = publicKey.getEncoded();&#10;&#10;        MessageDigest sha1 = MessageDigest.getInstance(&quot;SHA-1&quot;);&#10;        byte[] skiBytes = sha1.digest(publicKeyBytes);&#10;&#10;        extGen.addExtension(new ASN1ObjectIdentifier(&quot;2.5.29.14&quot;), false, new DEROctetString(skiBytes));&#10;    }&#10;&#10;    private static void addCertificateTemplateExtension(ExtensionsGenerator extGen, String oid,&#10;                                                       int majorVersion, int minorVersion) throws Exception {&#10;        byte[] templateExtension = buildCertificateTemplateExtension(oid, majorVersion, minorVersion);&#10;&#10;        extGen.addExtension(new ASN1ObjectIdentifier(&quot;1.3.6.1.4.1.311.21.7&quot;),&#10;                           false, new DEROctetString(templateExtension));&#10;    }&#10;&#10;    private static byte[] buildCertificateTemplateExtension(String oid, int majorVersion, int minorVersion) throws Exception {&#10;        ASN1EncodableVector templateVector = new ASN1EncodableVector();&#10;&#10;        templateVector.add(new ASN1ObjectIdentifier(oid));&#10;&#10;        templateVector.add(new ASN1Integer(majorVersion));&#10;&#10;        templateVector.add(new ASN1Integer(minorVersion));&#10;&#10;        DERSequence templateSequence = new DERSequence(templateVector);&#10;&#10;        return templateSequence.getEncoded();&#10;    }&#10;&#10;    private static byte[] exportEncryptedPkcs8PrivateKey(PrivateKey privateKey, String password) throws Exception {&#10;        try {&#10;            SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(&quot;PBKDF2WithHmacSHA256&quot;);&#10;&#10;            byte[] salt = new byte[16];&#10;            SecureRandom.getInstanceStrong().nextBytes(salt);&#10;&#10;            PBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray(), salt, 100000, 256);&#10;            SecretKey secretKey = secretKeyFactory.generateSecret(pbeKeySpec);&#10;&#10;            Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;);&#10;&#10;            byte[] iv = new byte[16];&#10;            SecureRandom.getInstanceStrong().nextBytes(iv);&#10;            javax.crypto.spec.IvParameterSpec ivSpec = new javax.crypto.spec.IvParameterSpec(iv);&#10;&#10;            javax.crypto.spec.SecretKeySpec aesKey = new javax.crypto.spec.SecretKeySpec(secretKey.getEncoded(), &quot;AES&quot;);&#10;            cipher.init(Cipher.ENCRYPT_MODE, aesKey, ivSpec);&#10;&#10;            byte[] privateKeyBytes = privateKey.getEncoded();&#10;            byte[] encryptedBytes = cipher.doFinal(privateKeyBytes);&#10;&#10;            org.bouncycastle.asn1.ASN1EncodableVector algorithmVector = new org.bouncycastle.asn1.ASN1EncodableVector();&#10;&#10;            algorithmVector.add(new org.bouncycastle.asn1.ASN1ObjectIdentifier(&quot;1.2.840.113549.1.5.13&quot;));&#10;&#10;            org.bouncycastle.asn1.ASN1EncodableVector pbes2Params = new org.bouncycastle.asn1.ASN1EncodableVector();&#10;&#10;            org.bouncycastle.asn1.ASN1EncodableVector kdfVector = new org.bouncycastle.asn1.ASN1EncodableVector();&#10;            kdfVector.add(new org.bouncycastle.asn1.ASN1ObjectIdentifier(&quot;1.2.840.113549.1.5.12&quot;));&#10;&#10;            org.bouncycastle.asn1.ASN1EncodableVector pbkdf2Params = new org.bouncycastle.asn1.ASN1EncodableVector();&#10;            pbkdf2Params.add(new org.bouncycastle.asn1.DEROctetString(salt));&#10;            pbkdf2Params.add(new org.bouncycastle.asn1.ASN1Integer(100000));&#10;            pbkdf2Params.add(new org.bouncycastle.asn1.ASN1Integer(32));&#10;&#10;            org.bouncycastle.asn1.ASN1EncodableVector hmacVector = new org.bouncycastle.asn1.ASN1EncodableVector();&#10;            hmacVector.add(new org.bouncycastle.asn1.ASN1ObjectIdentifier(&quot;1.2.840.113549.2.9&quot;));&#10;            pbkdf2Params.add(new org.bouncycastle.asn1.DERSequence(hmacVector));&#10;&#10;            kdfVector.add(new org.bouncycastle.asn1.DERSequence(pbkdf2Params));&#10;            pbes2Params.add(new org.bouncycastle.asn1.DERSequence(kdfVector));&#10;&#10;            org.bouncycastle.asn1.ASN1EncodableVector encSchemeVector = new org.bouncycastle.asn1.ASN1EncodableVector();&#10;            encSchemeVector.add(new org.bouncycastle.asn1.ASN1ObjectIdentifier(&quot;2.16.840.1.101.3.4.1.42&quot;));&#10;            encSchemeVector.add(new org.bouncycastle.asn1.DEROctetString(iv));&#10;            pbes2Params.add(new org.bouncycastle.asn1.DERSequence(encSchemeVector));&#10;&#10;            algorithmVector.add(new org.bouncycastle.asn1.DERSequence(pbes2Params));&#10;&#10;            org.bouncycastle.asn1.ASN1EncodableVector encPrivKeyVector = new org.bouncycastle.asn1.ASN1EncodableVector();&#10;            encPrivKeyVector.add(new org.bouncycastle.asn1.DERSequence(algorithmVector));&#10;            encPrivKeyVector.add(new org.bouncycastle.asn1.DEROctetString(encryptedBytes));&#10;&#10;            org.bouncycastle.asn1.DERSequence encPrivKeyInfo = new org.bouncycastle.asn1.DERSequence(encPrivKeyVector);&#10;&#10;            return encPrivKeyInfo.getEncoded();&#10;&#10;        } catch (Exception e) {&#10;            throw new Exception(&quot;Failed to encrypt private key: &quot; + e.getMessage(), e);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/gov/jordan/istd/utils/OtherFunctions.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/gov/jordan/istd/utils/OtherFunctions.java" />
              <option name="updatedContent" value="package gov.jordan.istd.utils;&#10;&#10;import java.util.Base64;&#10;&#10;/**&#10; * Java equivalent of C# OtherFunctions class&#10; * Provides utility methods for PEM conversion and CSR string cleaning&#10; */&#10;public class OtherFunctions {&#10;    &#10;    /**&#10;     * Convert private key bytes to PEM format (equivalent to C# ConvertPrivateKeyBytesToPem)&#10;     */&#10;    public static String convertPrivateKeyBytesToPem(byte[] privateKeyBytes) {&#10;        StringBuilder builder = new StringBuilder();&#10;        builder.append(&quot;-----BEGIN ENCRYPTED PRIVATE KEY-----\n&quot;);&#10;        builder.append(insertLineBreaks(Base64.getEncoder().encodeToString(privateKeyBytes), 64));&#10;        builder.append(&quot;\n-----END ENCRYPTED PRIVATE KEY-----\n&quot;);&#10;        return builder.toString();&#10;    }&#10;&#10;    /**&#10;     * Convert certificate bytes to PEM format (equivalent to C# ConvertCertificateBytesToPem)&#10;     */&#10;    public static String convertCertificateBytesToPem(byte[] certBytes) {&#10;        StringBuilder builder = new StringBuilder();&#10;        builder.append(&quot;-----BEGIN CERTIFICATE-----\n&quot;);&#10;        builder.append(insertLineBreaks(Base64.getEncoder().encodeToString(certBytes), 64));&#10;        builder.append(&quot;\n-----END CERTIFICATE-----\n&quot;);&#10;        return builder.toString();&#10;    }&#10;    &#10;    /**&#10;     * Clean CSR string by removing PEM headers and whitespace (equivalent to C# CleanCsrString)&#10;     */&#10;    public static String cleanCsrString(String rawCsr) {&#10;        if (rawCsr == null || rawCsr.trim().isEmpty()) {&#10;            return &quot;&quot;;&#10;        }&#10;&#10;        return rawCsr&#10;            .replaceAll(&quot;(?i)-----BEGIN CERTIFICATE REQUEST-----&quot;, &quot;&quot;)&#10;            .replaceAll(&quot;(?i)-----END CERTIFICATE REQUEST-----&quot;, &quot;&quot;)&#10;            .replace(&quot;\r&quot;, &quot;&quot;)&#10;            .replace(&quot;\n&quot;, &quot;&quot;)&#10;            .replace(&quot;\t&quot;, &quot;&quot;)&#10;            .trim();&#10;    }&#10;    &#10;    /**&#10;     * Insert line breaks every specified number of characters (equivalent to C# Base64FormattingOptions.InsertLineBreaks)&#10;     */&#10;    private static String insertLineBreaks(String input, int lineLength) {&#10;        StringBuilder result = new StringBuilder();&#10;        for (int i = 0; i &lt; input.length(); i += lineLength) {&#10;            result.append(input, i, Math.min(i + lineLength, input.length()));&#10;            if (i + lineLength &lt; input.length()) {&#10;                result.append(&quot;\n&quot;);&#10;            }&#10;        }&#10;        return result.toString();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/gov/jordan/istd/utils/PrivateKeyUtil.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/gov/jordan/istd/utils/PrivateKeyUtil.java" />
              <option name="originalContent" value="package gov.jordan.istd.utils;&#10;&#10;import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;&#10;import org.bouncycastle.openssl.PEMParser;&#10;import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;&#10;import org.bouncycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder;&#10;import org.bouncycastle.operator.InputDecryptorProvider;&#10;import org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo;&#10;&#10;import java.io.StringReader;&#10;import java.nio.charset.StandardCharsets;&#10;import java.security.KeyFactory;&#10;import java.security.PrivateKey;&#10;import java.security.spec.PKCS8EncodedKeySpec;&#10;import java.util.Base64;&#10;&#10;public class PrivateKeyUtil {&#10;&#10;    public static PrivateKey loadPrivateKey(String privateKeyContent, String password) throws Exception {&#10;        if (privateKeyContent.contains(&quot;-----BEGIN ENCRYPTED PRIVATE KEY-----&quot;)) {&#10;            return loadEncryptedPKCS8PrivateKey(privateKeyContent, password);&#10;        } else if (privateKeyContent.contains(&quot;-----BEGIN PRIVATE KEY-----&quot;)) {&#10;            return loadUnencryptedPKCS8PrivateKey(privateKeyContent);&#10;        } else if (privateKeyContent.contains(&quot;-----BEGIN EC PRIVATE KEY-----&quot;)) {&#10;            return loadECPrivateKey(privateKeyContent);&#10;        } else if (privateKeyContent.contains(&quot;-----BEGIN RSA PRIVATE KEY-----&quot;)) {&#10;            return loadRSAPrivateKey(privateKeyContent);&#10;        } else {&#10;            return loadPrivateKeyFromBase64(privateKeyContent, password);&#10;        }&#10;    }&#10;&#10;    private static PrivateKey loadEncryptedPKCS8PrivateKey(String privateKeyContent, String password) throws Exception {&#10;        try (PEMParser pemParser = new PEMParser(new StringReader(privateKeyContent))) {&#10;            Object object = pemParser.readObject();&#10;            JcaPEMKeyConverter converter = new JcaPEMKeyConverter();&#10;&#10;            if (object instanceof PKCS8EncryptedPrivateKeyInfo) {&#10;                PKCS8EncryptedPrivateKeyInfo encryptedPrivateKeyInfo = (PKCS8EncryptedPrivateKeyInfo) object;&#10;                InputDecryptorProvider decryptorProvider = new JceOpenSSLPKCS8DecryptorProviderBuilder()&#10;                        .build(password.toCharArray());&#10;                return converter.getPrivateKey(encryptedPrivateKeyInfo.decryptPrivateKeyInfo(decryptorProvider));&#10;            } else {&#10;                throw new Exception(&quot;Expected encrypted private key but found different format&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private static PrivateKey loadUnencryptedPKCS8PrivateKey(String privateKeyContent) throws Exception {&#10;        String cleanKey = privateKeyContent&#10;                .replace(&quot;-----BEGIN PRIVATE KEY-----&quot;, &quot;&quot;)&#10;                .replace(&quot;-----END PRIVATE KEY-----&quot;, &quot;&quot;)&#10;                .replaceAll(&quot;\\s&quot;, &quot;&quot;);&#10;&#10;        byte[] keyBytes = Base64.getDecoder().decode(cleanKey);&#10;        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes);&#10;&#10;        try {&#10;            KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);&#10;            return keyFactory.generatePrivate(keySpec);&#10;        } catch (Exception e) {&#10;            KeyFactory keyFactory = KeyFactory.getInstance(&quot;EC&quot;);&#10;            return keyFactory.generatePrivate(keySpec);&#10;        }&#10;    }&#10;&#10;    private static PrivateKey loadECPrivateKey(String privateKeyContent) throws Exception {&#10;        String cleanKey = privateKeyContent&#10;                .replace(&quot;-----BEGIN EC PRIVATE KEY-----&quot;, &quot;&quot;)&#10;                .replace(&quot;-----END EC PRIVATE KEY-----&quot;, &quot;&quot;)&#10;                .replaceAll(&quot;\\s&quot;, &quot;&quot;);&#10;&#10;        return ECDSAUtil.getPrivateKey(cleanKey);&#10;    }&#10;&#10;    private static PrivateKey loadRSAPrivateKey(String privateKeyContent) throws Exception {&#10;        try (PEMParser pemParser = new PEMParser(new StringReader(privateKeyContent))) {&#10;            Object object = pemParser.readObject();&#10;            JcaPEMKeyConverter converter = new JcaPEMKeyConverter();&#10;&#10;            if (object instanceof org.bouncycastle.openssl.PEMKeyPair) {&#10;                org.bouncycastle.openssl.PEMKeyPair keyPair = (org.bouncycastle.openssl.PEMKeyPair) object;&#10;                return converter.getPrivateKey(keyPair.getPrivateKeyInfo());&#10;            } else if (object instanceof org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo) {&#10;                throw new Exception(&quot;Encrypted RSA private key detected - use password parameter&quot;);&#10;            } else {&#10;                return converter.getPrivateKey((PrivateKeyInfo) object);&#10;            }&#10;        }&#10;    }&#10;&#10;    private static PrivateKey loadPrivateKeyFromBase64(String privateKeyBase64, String password) throws Exception {&#10;        byte[] privateKeyBytes = Base64.getDecoder().decode(privateKeyBase64);&#10;&#10;        // Try to parse as PEM first&#10;        String pemContent = new String(privateKeyBytes, StandardCharsets.UTF_8);&#10;        if (pemContent.contains(&quot;-----BEGIN&quot;)) {&#10;            return loadPrivateKey(pemContent, password);&#10;        }&#10;&#10;&#10;        try {&#10;            PKCS8EncryptedPrivateKeyInfo encryptedPrivateKeyInfo = new PKCS8EncryptedPrivateKeyInfo(privateKeyBytes);&#10;            if (password != null &amp;&amp; !password.isEmpty()) {&#10;                InputDecryptorProvider decryptorProvider = new JceOpenSSLPKCS8DecryptorProviderBuilder()&#10;                        .build(password.toCharArray());&#10;                JcaPEMKeyConverter converter = new JcaPEMKeyConverter();&#10;                return converter.getPrivateKey(encryptedPrivateKeyInfo.decryptPrivateKeyInfo(decryptorProvider));&#10;            } else {&#10;                throw new Exception(&quot;Encrypted private key requires password&quot;);&#10;            }&#10;        } catch (Exception encryptedException) {&#10;&#10;            try (PEMParser pemParser = new PEMParser(new StringReader(pemContent))) {&#10;                Object object = pemParser.readObject();&#10;                if (object != null) {&#10;                    JcaPEMKeyConverter converter = new JcaPEMKeyConverter();&#10;&#10;                    if (object instanceof PKCS8EncryptedPrivateKeyInfo) {&#10;                        PKCS8EncryptedPrivateKeyInfo encryptedPrivateKeyInfo = (PKCS8EncryptedPrivateKeyInfo) object;&#10;                        if (password != null &amp;&amp; !password.isEmpty()) {&#10;                            InputDecryptorProvider decryptorProvider = new JceOpenSSLPKCS8DecryptorProviderBuilder()&#10;                                    .build(password.toCharArray());&#10;                            return converter.getPrivateKey(encryptedPrivateKeyInfo.decryptPrivateKeyInfo(decryptorProvider));&#10;                        } else {&#10;                            throw new Exception(&quot;Encrypted private key requires password&quot;);&#10;                        }&#10;                    } else {&#10;                        return converter.getPrivateKey((PrivateKeyInfo) object);&#10;                    }&#10;                }&#10;            } catch (Exception pemException) {&#10;&#10;                try {&#10;                    PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(privateKeyBytes);&#10;&#10;                    try {&#10;                        KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);&#10;                        return keyFactory.generatePrivate(keySpec);&#10;                    } catch (Exception rsaException) {&#10;                        try {&#10;                            KeyFactory keyFactory = KeyFactory.getInstance(&quot;EC&quot;);&#10;                            return keyFactory.generatePrivate(keySpec);&#10;                        } catch (Exception ecException) {&#10;                            throw new Exception(&quot;Unable to parse private key format. Encrypted PKCS#8 error: &quot; + encryptedException.getMessage() +&#10;                                              &quot;, PEM error: &quot; + pemException.getMessage() +&#10;                                              &quot;, RSA error: &quot; + rsaException.getMessage() +&#10;                                              &quot;, EC error: &quot; + ecException.getMessage());&#10;                        }&#10;                    }&#10;                } catch (Exception rawException) {&#10;                    throw new Exception(&quot;Unable to parse private key. All parsing attempts failed. &quot; +&#10;                                      &quot;Encrypted PKCS#8 error: &quot; + encryptedException.getMessage() +&#10;                                      &quot;, PEM error: &quot; + pemException.getMessage() +&#10;                                      &quot;, Raw PKCS#8 error: &quot; + rawException.getMessage());&#10;                }&#10;            }&#10;        }&#10;&#10;        throw new Exception(&quot;Unable to determine private key format&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package gov.jordan.istd.utils;&#10;&#10;import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;&#10;import org.bouncycastle.openssl.PEMParser;&#10;import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;&#10;import org.bouncycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder;&#10;import org.bouncycastle.operator.InputDecryptorProvider;&#10;import org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo;&#10;&#10;import java.io.StringReader;&#10;import java.nio.charset.StandardCharsets;&#10;import java.security.KeyFactory;&#10;import java.security.PrivateKey;&#10;import java.security.spec.PKCS8EncodedKeySpec;&#10;import java.util.Base64;&#10;&#10;public class PrivateKeyUtil {&#10;&#10;    public static PrivateKey loadPrivateKey(String privateKeyContent, String password) throws Exception {&#10;        if (privateKeyContent.contains(&quot;-----BEGIN ENCRYPTED PRIVATE KEY-----&quot;)) {&#10;            return loadEncryptedPKCS8PrivateKey(privateKeyContent, password);&#10;        } else if (privateKeyContent.contains(&quot;-----BEGIN PRIVATE KEY-----&quot;)) {&#10;            return loadUnencryptedPKCS8PrivateKey(privateKeyContent);&#10;        } else if (privateKeyContent.contains(&quot;-----BEGIN EC PRIVATE KEY-----&quot;)) {&#10;            return loadECPrivateKey(privateKeyContent);&#10;        } else if (privateKeyContent.contains(&quot;-----BEGIN RSA PRIVATE KEY-----&quot;)) {&#10;            return loadRSAPrivateKey(privateKeyContent);&#10;        } else {&#10;            return loadPrivateKeyFromBase64(privateKeyContent, password);&#10;        }&#10;    }&#10;&#10;    private static PrivateKey loadEncryptedPKCS8PrivateKey(String privateKeyContent, String password) throws Exception {&#10;        try (PEMParser pemParser = new PEMParser(new StringReader(privateKeyContent))) {&#10;            Object object = pemParser.readObject();&#10;            JcaPEMKeyConverter converter = new JcaPEMKeyConverter();&#10;&#10;            if (object instanceof PKCS8EncryptedPrivateKeyInfo) {&#10;                PKCS8EncryptedPrivateKeyInfo encryptedPrivateKeyInfo = (PKCS8EncryptedPrivateKeyInfo) object;&#10;                InputDecryptorProvider decryptorProvider = new JceOpenSSLPKCS8DecryptorProviderBuilder()&#10;                        .build(password.toCharArray());&#10;                return converter.getPrivateKey(encryptedPrivateKeyInfo.decryptPrivateKeyInfo(decryptorProvider));&#10;            } else {&#10;                throw new Exception(&quot;Expected encrypted private key but found different format&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private static PrivateKey loadUnencryptedPKCS8PrivateKey(String privateKeyContent) throws Exception {&#10;        String cleanKey = privateKeyContent&#10;                .replace(&quot;-----BEGIN PRIVATE KEY-----&quot;, &quot;&quot;)&#10;                .replace(&quot;-----END PRIVATE KEY-----&quot;, &quot;&quot;)&#10;                .replaceAll(&quot;\\s&quot;, &quot;&quot;);&#10;&#10;        byte[] keyBytes = Base64.getDecoder().decode(cleanKey);&#10;        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes);&#10;&#10;        try {&#10;            KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);&#10;            return keyFactory.generatePrivate(keySpec);&#10;        } catch (Exception e) {&#10;            KeyFactory keyFactory = KeyFactory.getInstance(&quot;EC&quot;);&#10;            return keyFactory.generatePrivate(keySpec);&#10;        }&#10;    }&#10;&#10;    private static PrivateKey loadECPrivateKey(String privateKeyContent) throws Exception {&#10;        String cleanKey = privateKeyContent&#10;                .replace(&quot;-----BEGIN EC PRIVATE KEY-----&quot;, &quot;&quot;)&#10;                .replace(&quot;-----END EC PRIVATE KEY-----&quot;, &quot;&quot;)&#10;                .replaceAll(&quot;\\s&quot;, &quot;&quot;);&#10;&#10;        return ECDSAUtil.getPrivateKey(cleanKey);&#10;    }&#10;&#10;    private static PrivateKey loadRSAPrivateKey(String privateKeyContent) throws Exception {&#10;        try (PEMParser pemParser = new PEMParser(new StringReader(privateKeyContent))) {&#10;            Object object = pemParser.readObject();&#10;            JcaPEMKeyConverter converter = new JcaPEMKeyConverter();&#10;&#10;            if (object instanceof org.bouncycastle.openssl.PEMKeyPair) {&#10;                org.bouncycastle.openssl.PEMKeyPair keyPair = (org.bouncycastle.openssl.PEMKeyPair) object;&#10;                return converter.getPrivateKey(keyPair.getPrivateKeyInfo());&#10;            } else if (object instanceof org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo) {&#10;                throw new Exception(&quot;Encrypted RSA private key detected - use password parameter&quot;);&#10;            } else {&#10;                return converter.getPrivateKey((PrivateKeyInfo) object);&#10;            }&#10;        }&#10;    }&#10;&#10;    private static PrivateKey loadPrivateKeyFromBase64(String privateKeyBase64, String password) throws Exception {&#10;        byte[] privateKeyBytes = Base64.getDecoder().decode(privateKeyBase64);&#10;&#10;        // Try to parse as PEM first&#10;        String pemContent = new String(privateKeyBytes, StandardCharsets.UTF_8);&#10;        if (pemContent.contains(&quot;-----BEGIN&quot;)) {&#10;            return loadPrivateKey(pemContent, password);&#10;        }&#10;&#10;        // Try parsing as raw unencrypted PKCS#8 DER data first (most common for new CSR generation)&#10;        try {&#10;            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(privateKeyBytes);&#10;&#10;            // Try RSA first (most likely for new CSR keys)&#10;            try {&#10;                KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);&#10;                return keyFactory.generatePrivate(keySpec);&#10;            } catch (Exception rsaException) {&#10;                // Try EC as fallback&#10;                try {&#10;                    KeyFactory keyFactory = KeyFactory.getInstance(&quot;EC&quot;);&#10;                    return keyFactory.generatePrivate(keySpec);&#10;                } catch (Exception ecException) {&#10;                    // Continue to try encrypted parsing&#10;                }&#10;            }&#10;        } catch (Exception unencryptedException) {&#10;            // Continue to try encrypted parsing&#10;        }&#10;&#10;        // Try parsing as encrypted PKCS#8 DER data&#10;        try {&#10;            PKCS8EncryptedPrivateKeyInfo encryptedPrivateKeyInfo = new PKCS8EncryptedPrivateKeyInfo(privateKeyBytes);&#10;            if (password != null &amp;&amp; !password.isEmpty()) {&#10;                InputDecryptorProvider decryptorProvider = new JceOpenSSLPKCS8DecryptorProviderBuilder()&#10;                        .build(password.toCharArray());&#10;                JcaPEMKeyConverter converter = new JcaPEMKeyConverter();&#10;                return converter.getPrivateKey(encryptedPrivateKeyInfo.decryptPrivateKeyInfo(decryptorProvider));&#10;            } else {&#10;                throw new Exception(&quot;Encrypted private key requires password&quot;);&#10;            }&#10;        } catch (Exception encryptedException) {&#10;            // Try PEM parsing as last resort&#10;            try (PEMParser pemParser = new PEMParser(new StringReader(pemContent))) {&#10;                Object object = pemParser.readObject();&#10;                if (object != null) {&#10;                    JcaPEMKeyConverter converter = new JcaPEMKeyConverter();&#10;&#10;                    if (object instanceof PKCS8EncryptedPrivateKeyInfo) {&#10;                        PKCS8EncryptedPrivateKeyInfo encryptedPrivateKeyInfo = (PKCS8EncryptedPrivateKeyInfo) object;&#10;                        if (password != null &amp;&amp; !password.isEmpty()) {&#10;                            InputDecryptorProvider decryptorProvider = new JceOpenSSLPKCS8DecryptorProviderBuilder()&#10;                                    .build(password.toCharArray());&#10;                            return converter.getPrivateKey(encryptedPrivateKeyInfo.decryptPrivateKeyInfo(decryptorProvider));&#10;                        } else {&#10;                            throw new Exception(&quot;Encrypted private key requires password&quot;);&#10;                        }&#10;                    } else {&#10;                        return converter.getPrivateKey((PrivateKeyInfo) object);&#10;                    }&#10;                }&#10;            } catch (Exception pemException) {&#10;                throw new Exception(&quot;Unable to parse private key. Unencrypted PKCS#8 error, Encrypted PKCS#8 error: &quot; + encryptedException.getMessage() +&#10;                                  &quot;, PEM error: &quot; + pemException.getMessage());&#10;            }&#10;        }&#10;&#10;        throw new Exception(&quot;Unable to determine private key format after all attempts&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>